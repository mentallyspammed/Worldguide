import logging
from typing import Dict, List, Optional, Tuple
import pandas as pd
import numpy as np
from ta.trend import EMAIndicator, ADXIndicator
from ta.momentum import rsi
from ta.volume import on_balance_volume, volume_price_trend
from colorama import Fore  # Import colorama for colored output
from config import Config
from bybit_api import BybitAPI


class TradingAnalyzer:


"""Analyzes market data for trading insights."""


def __init__(
    self, config: Config, logger: logging.Logger): """Initializes the TradingAnalyzer with configuration and logger."""


self.config = config
self.logger = logger
self.api = BybitAPI(config, logger)
self.levels = {}
# Beef this up and add weight
self.df = self.api.fetch_klines(config.symbol, config.interval, limit=200)


def analyze(self, current_price: float) -> None:


"""Analyzes the market data and provides insights."""


if self.df.empty:
self.logger.error("DataFrame is empty. Cannot perform analysis.")
# Calculate various indicators
self.calculate_indicators()
# Perform individual analysis
trend = self._determine_trend_momentum_adx()
momentum = self.analyze_momentum(self.df)
volume = self.analyze_volume(self.df)
macd_analysis = self._analyze_macd()
rsi_value = self.df["RSI"].iloc[-1] rsi_analysis = self._analyze_rsi(rsi_value)
# Calculate levels
nearest_supports, nearest_resistances = self._find_nearest_levels(
    # Calculate ATR                                                        atr = self.df["ATR"].iloc[-1]
    current_price)
# Adapt Parameters
adapted_params = self.adapt_parameters(atr)
# Analyze higher timeframes
higher_tf_levels = self._analyze_higher_timeframes(
    # Generate trade suggestions with weights
    self.config.HIGHER_TIMEFRAMES)
trade_suggestions, long_score, short_score = self._suggest_trades(
    current_price, trend, nearest_supports, nearest_resistances, adapted_params)

# Apply weights to trade suggestions                                   weighted_trade_suggestions = {                                             "suggestions": trade_suggestions,
"long_score": long_score * self.config.LONG_WEIGHT,
"short_score": short_score * self.config.SHORT_WEIGHT,
# Log analysis results                                                 self._log_analysis_results(current_price,
trend, momentum, volume, rsi_value, rsi_analysis, macd_analysis,
# Call and use directly                                                               nearest_supports,
self._calculate_fibonacci_support_resistance(
    self.df),
nearest_resistances,
higher_tf_levels, trade_suggestions,
long_score,
short_score,
def analyze(self, current_price: float) -> None:


"""Analyzes the market data and provides insights.""" if self.df.empty:
self.logger.error("DataFrame is empty. Cannot perform analysis.") return
# Calculate various indicators
self.df = self.calculate_indicators()  # Perform individual analysis
trend = self._determine_trend_momentum_adx()
momentum = self.analyze_momentum(self.df)
volume = self.analyze_volume(self.df) macd_analysis = self._analyze_macd() rsi_value = self.df["RSI"].iloc[-1] rsi_analysis = self._analyze_rsi(rsi_value)
# Calculate levels
nearest_supports, nearest_resistances = self._find_nearest_levels(
    current_price)

# Calculate ATR                                                        atr = self.df["ATR"].iloc[-1]
# Adapt Parameters
adapted_params = self.adapt_parameters(atr)
# Analyze higher timeframes
higher_tf_levels = self._analyze_higher_timeframes(
    self.config.HIGHER_TIMEFRAMES)
# Generate trade suggestions with weights                              trade_suggestions, long_score, short_score = self._suggest_trades(
current_price, trend, nearest_supports, nearest_resistances, adapted_params

# Apply weights to trade suggestions                                   weighted_trade_suggestions = {
"suggestions": trade_suggestions, "long_score": long_score * self.config.LONG_WEIGHT,
"short_score": short_score * self.config.SHORT_WEIGHT,
# Log analysis results
self._log_analysis_results(weighted_trade_suggestions)
# Calculate various indicators                                         self.df = self.calculate_indicators()                                                                                                         # Perform individual analysis                                          trend = self._determine_trend_momentum_adx()                           momentum = self.analyze_momentum(self.df)
volume = self.analyze_volume(self.df) macd_analysis = self._analyze_macd()
rsi_value = self.df["RSI"].iloc[-1]
# Calculate levels                                                     high = self.df["high"].max()                                           low = self.df["low"].min()
rsi_analysis = self._analyze_rsi(rsi_value)
close = self.df["close"].iloc[-1] fib_levels = self._calculate_fibonacci_support_resistance(self.df) self._calculate_pivot_points(high, low, close) self._identify_support_resistance()
# Calculate ATR                                                        atr = self.df["ATR"].iloc[-1]
nearest_supports, nearest_resistances = self._find_nearest_levels(
    current_price)
# Adapt Parameters for weighted score and trade suggestions based on volitility                                                               adapted_params = self.adapt_parameters(atr)  # Analyze higher timeframes                                                                      higher_tf_levels = self._analyze_higher_timeframes(                        self.config.HIGHER_TIMEFRAMES)                                     # Generate trade suggestions                                           trade_suggestions, long_score, short_score = self._suggest_trades(         current_price, trend, nearest_supports, nearest_resistances, adapted_params                                                               )

# Log analysis results                                                 self._log_analysis_results(
current_price, trend,
momentum, volume,
rsi_value, rsi_analysis, macd_analysis,
fib_levels, nearest_supports, nearest_resistances, higher_tf_levels, trade_suggestions, long_score, short_score,
def wma(self, series: pd.Series, window: int) -> pd.Series:


"""Calculates the Weighted Moving Average (WMA).""" weights = np.arange(1, window + 1)
return series.rolling(window=window).apply(lambda prices: np.dot(prices, weights) / weights.sum(), raw=True)


def hma(self, series: pd.Series, window: int) -> pd.Series: """Calculates the Hull Moving Average (HMA).

        Args:                                                                      series: Pandas Series of prices.                                       window: The time period for the HMA.
                                                                               Returns:                                                                   Pandas Series representing the HMA.                                """ m = np.int64(window) half_length = np.int64(m / 2)


sqrt_length = np.int64(np.sqrt(m)) wma1 = self.wma(series, half_length)
wma2 = self.wma(series.shift(half_length), half_length) wma_diff = 2 * wma1 - wma2
return self.wma(wma_diff, sqrt_length)
def calculate_indicators(self) -> pd.DataFrame:


"""Calculates moving averages, RSI, and volume metrics."""
if self.df.empty: return self.df
# Moving Averages                                                      try:
self.df["WMA_Short"] = wma(self.df["close"], window=self.config.ma_periods_short
).wma() self.df["wma_Long"] = wma(
self.df["close"], window=self.config.ma_periods_long).wma()
self.df["FMA"] = EMAIndicator(
    self.df["close"], window=self.config.fma_period).ema_indicator()
self.df["WMA"] = self.wma(
self.df["close"], window=self.config.ma_periods_short) self.df["HMA"] = self.hma(
self.df["close"], window=self.config.ma_periods_short
) except KeyError as e:
self.logger.error(f"Error calculating moving averages: {
e
}")  # RSI                                                                  try:
self.df["RSI"] = rsi(self.df["close"], window=self.config.rsi_period) except KeyError as e:
self.logger.error(f"Error calculating RSI: {
e
}")
# Volume Analysis                                                      try:
self.df["Avg_Volume"] = self.df["volume"].rolling(window=10).mean() except KeyError as e: self.logger.error(f"Error calculating average volume: {
e
}")  # MACD Calculation                                                     macd_data = self.calculate_macd()
if not macd_data.empty: self.df["MACD"] = macd_data["macd"]
# ADX Calculation
self.df["Signal"] = macd_data["signal"] self.df["Histogram"] = macd_data["histogram"]
adx_data = self.calculate_adx() if not adx_data.empty:
self.df["ADX"] = adx_data["ADX"] self.df["+DI"] = adx_data["+DI"] self.df["-DI"] = adx_data["-DI"]
# Aroon Calculation                                                    aroon_data = self.calculate_aroon()                                    if not aroon_data.empty:
self.df["Aroon Up"] = aroon_data["Aroon Up"] self.df["Aroon Down"] = aroon_data["Aroon Down"]
# Average True Range (ATR)                                             self.df["ATR"] = self.calculate_atr()
# Calculate OBV and VPT                                                try:
self.df["OBV"] = self.calculate_obv() self.df["VPT"] = self.calculate_vpt() except KeyError as e:
self.logger.error(f"Error calculating OBV or VPT: {
e
}") return self.df def calculate_wma(self, window: int) -> pd.Series:
"""Calculates the Weighted Moving Average (WMA).""" return self.wma(self.df["close"], window=window) def calculate_hma(self, window: int) -> pd.Series:
"""Calculates the Hull Moving Average (HMA).""" return self.hma(self.df["close"], window=window) def calculate_momentum(self, period: int=10) -> pd.Series:
"""Calculate momentum using Rate of Change (ROC).""" try: return ((self.df["close"] - self.df["close"].shift(period)) / self.df["close"].shift(period)) * 100 except KeyError as e:
self.logger.error(f"Error calculating momentum: {
e
}") return pd.Series(dtype="float64") except ZeroDivisionError: self.logger.error("Error calculating momentum: Division by zero") return pd.Series(dtype="float64")
def calculate_macd(self) -> pd.DataFrame: """Calculate MACD and signal line"""


try: close_prices = self.df["close"]
ma_short = close_prices.ewm(span=3, adjust=False).mean() ma_long = close_prices.ewm(span=34, adjust=False).mean() macd = ma_short - ma_long signal = macd.ewm(span=89, adjust=False).mean()
histogram = macd - signal return pd.DataFrame({
"macd": macd, "signal": signal, "histogram": histogram
}) except KeyError as e: self.logger.error(f"Missing the close column to calculate MACD: {
e
}")
return pd.DataFrame() def calculate_adx(self, window: int=10) -> pd.DataFrame: """Calculates the Average Directional Index (ADX) with +DI and -DI.""" try:
adx_indicator = ADXIndicator(self.df["high"], self.df["low"], self.df["close"], window=window) return pd.DataFrame({
"ADX": adx_indicator.adx(), "+DI": adx_indicator.adx_pos(), "-DI": adx_indicator.adx_neg(),
}
) except KeyError as e: self.logger.error(f"Error calculating ADX: {
e
}") return pd.DataFrame() def calculate_aroon(self, window: int=14) -> pd.DataFrame:
"""Calculates the Aroon Indicator.""" try: return pd.DataFrame({
"Aroon Up": self._calculate_aroon_up_manual(self.df, window=window),
"Aroon Down": self._calculate_aroon_down_manual(self.df, window=window),
}
) except KeyError as e: self.logger.error(f"Error calculating Aroon Indicator: {
e
}")
return pd.DataFrame()
def _calculate_aroon_up_manual(self, df: pd.DataFrame, window: int = 25
) -> pd.Series: """Calculates the Aroon Up indicator manually."""


aroon_up = [] for i in range(window, len(df)): high_slice = df["high"].iloc[i - window: i] high_period = high_slice.values.tolist() highest_high_index = high_period.index(max(high_period)) aroon_up_value = ((window - highest_high_index) / window) * 100 aroon_up.append(aroon_up_value) return pd.Series(aroon_up, index=df.index[window:]) def _calculate_aroon_down_manual(self, df: pd.DataFrame, window: int=25) -> pd.Series: """Calculates the Aroon Down indicator manually."""
aroon_down = [] for i in range(window, len(df)):
low_slice = df["low"].iloc[i - window: i] low_period = low_slice.values.tolist() lowest_low_index = low_period.index(min(low_period)) aroon_down_value = ((window - lowest_low_index) / window) * 100 aroon_down.append(aroon_down_value)
return pd.Series(aroon_down, index=df.index[window:])


def calculate_atr(self, window: int = 10) -> pd.Series: """Calculates the Average True Range (ATR).""" try: high = self.df["high"] low = self.df["low"] close = self.df["close"] tr_candidates = pd.DataFrame({
"hl": high - low, "hcp": np.abs(high - close.shift()),
"lcp": np.abs(low - close.shift()),
}) tr = tr_candidates.max(axis=1) atr = tr.rolling(window=window).mean() return atr except KeyError as e: self.logger.error(f"Error calculating ATR: {
e
}")


return pd.Series(dtype="float64") def calculate_obv(self) -> pd.Series: """Calculates On-Balance Volume (OBV).""" return on_balance_volume(self.df["close"], self.df["volume"])


def calculate_vpt(
    self) -> pd.Series: """Calculates Volume Price Trend (VPT)."""


return volume_price_trend(self.df["close"], self.df["volume"]) def detect_macd_divergence(self) -> Optional[str]: """Detects MACD divergence for trend confirmation. Returns "bullish", "bearish", or None string""" if self.df.empty or len(self.df) < 30: return None macd_df = self.calculate_macd() if macd_df.empty: return None
prices = self.df["close"] macd_histogram = macd_df["histogram"]  # Bullish divergence
if (prices.iloc[-2] > prices.iloc[-1] and macd_histogram.iloc[-2] < macd_histogram.iloc[-1]): return "bullish"  # Higher low on price, lower low on histogram        # Bearish divergence                                                   elif (prices.iloc[-2] < prices.iloc[-1] and macd_histogram.iloc[-2] > macd_histogram.iloc[-1]):                                               return "bearish"  # Lower high on price, higher high on histogram      return None                                                            def adapt_parameters(self, atr: float) -> Dict:                                                                                               """Adapt the parameters based on recent ATR"""                         base_params = {                                                            "momentum_period": 10,                                                 "momentum_ma_short": 5,                                                "momentum_ma_long": 14,
"volume_ma_period": 20, "atr_period": 10, "user_defined_weights": {
"momentum_cross": 0.30,
"positive_momentum": 0.40, "significant_volume": 0.30, "divergence": 0.20,
},
# High volitility                                            base_params["momentum_period"] = 15
if atr > 25:
base_params["momentum_ma_short"] = 10 base_params["momentum_ma_long"] = 30
base_params["user_defined_weights"] = {
"momentum_cross": 0.15, "positive_momentum": 0.40, "significant_volume": 0.45, "divergence": 0.25,
}
elif atr > 10: base_params["user_defined_weights"] = {
"momentum_cross": 0.25, "positive_momentum": 0.35, "significant_volume": 0.40, "divergence": 0.30,
} return base_params def determine_trend(self, df: pd.DataFrame) -> str:
"""Determines the trend based on EMA and FMA crossovers.""" if df.empty or "EMA_Short" not in df or "EMA_Long" not in df or "FMA" not in df: return "neutral"
ema_short = df["EMA_Short"].iloc[-1] ema_long = df["EMA_Long"].iloc[-1] fma = df["FMA"].iloc[-1]
if ema_short > ema_long > fma: return "bullish" elif ema_short < ema_long < fma: return "bearish" else: return "neutral"


def analyze_momentum(
    self, df: pd.DataFrame) -> str: """Analyzes RSI to determine momentum."""


if df.empty or "RSI" not in df:
return "neutral" rsi_value = df["RSI"].iloc[-1] if rsi_value > self.config.rsi_overbought: return "overbought"
elif rsi_value < self.config.rsi_oversold: return "oversold" else: return "neutral"
def analyze_volume(
    self, df: pd.DataFrame) -> str: """Analyzes volume to determine if the current volume is above or below average."""


if df.empty or "volume" not in df or "Avg_Volume" not in df: return "neutral"
current_volume = df["volume"].iloc[-1] avg_volume = df["Avg_Volume"].iloc[-1] if current_volume > avg_volume: return "high"
else: return "low"
def _calculate_fibonacci_support_resistance(self, df: pd.DataFrame) -> Dict[str, Optional[float]]: """Calculates support and resistance levels using Fibonacci retracement.""" if df.empty:


return {
"support": None, "resistance": None,
"nearest_support": None, "nearest_resistance": None,
}
high = df["high"].max() low = df["low"].min() price_range = high - low fib_ratios = [0.236, 0.382, 0.5, 0.618, 0.786] supports = [low + (price_range * ratio) for ratio in fib_ratios] resistances = [high - (price_range * ratio) for ratio in fib_ratios] supports.sort() resistances.sort() current_price = df["close"].iloc[-1] nearest_support = max((s for s in supports if s < current_price), default=None)
nearest_resistance = min(
    (r for r in resistances if r > current_price), default=None)
self.levels.update({
"support": supports, "resistance": resistances,
"nearest_support": nearest_support, "nearest_resistance": nearest_resistance,
}) return {
"support": supports, "resistance": resistances, "nearest_support": nearest_support, "nearest_resistance": nearest_resistance,
} def _calculate_pivot_points(self, high: float, low: float, close: float) -> Dict[str, float]: """Calculates pivot points.""" pivot = (high + low + close) / 3 r1 = 2 * pivot - low
s1 = 2 * pivot - high r2 = pivot + (high - low) s2 = pivot - (high - low) r3 = high + 2 * (pivot - low)
s3 = low - 2 * (high - pivot) pivot_levels = {
"Pivot": pivot, "R1": r1, "S1": s1,
"R2": r2, "S2": s2, "R3": r3, "S3": s3,
} self.levels.update(pivot_levels) return pivot_levels def _analyze_macd(self) -> str: """Provides a basic analysis of the MACD indicator.""" if (
"MACD" not in self.df or "Signal" not in self.df or "Histogram" not in self.df): return "Cannot analyze MACD due to missing data"
macd_line = self.df["MACD"].iloc[-1] signal_line = self.df["Signal"].iloc[-1] histogram = self.df["Histogram"].iloc[-1] if macd_line > signal_line and histogram > 0:
# MACD above Signal and Histogram positive                                                                              elif macd_line < signal_line and histogram < 0:                                              return "bullish"
# MACD below Signal and Histogram negative           elif macd_line > signal_line and histogram < 0:
return "bearish"
return ("potential bearish reversal"  # MACD above Signal but Histogram negative                                                                  ) elif macd_line < signal_line and histogram > 0:                  return ("potential bullish reversal"  # MACD below Signal but Histogram positive
) else:
return "neutral"
def _find_extrema(self, data: np.ndarray,
                  window: int) -> Optional[np.ndarray]: """Finds local extrema (peaks and valleys) in the data."""


extrema = [] for i in range(window, len(data) - window): is_peak = data[i] > max(data[i - window: i]) and data[i] > max(data[i + 1: i + 1 + window])
is_valley = data[i] < min(
data[i - window: i]) and data[i] < min(data[i + 1: i + 1 + window])if is_peak or is_valley: extrema.append(data[i]) if extrema: return np.array(extrema) else:
self.logger.warning("No extrema found.") return None def _cluster_levels(self, data: np.ndarray, sensitivity: float) -> set:
"""Clusters levels based on sensitivity using a simple clustering algorithm.""" if not data.any():  # Check if the array is empty.                         return set()                                                                                                                              # Sort the data using Python's built-in sorted()                       sorted_data = sorted(list(data)) clusters = [] cluster = [sorted_data[0]]                                                                     for i in range(1, len(sorted_data)):
if np.abs(sorted_data[i] - np.mean(cluster)) < sensitivity * sorted_data[i]: cluster.append(sorted_data[i]) else: clusters.append(cluster) cluster = [sorted_data[i]] clusters.append(cluster)  # Append the last cluster                    # Calculate mean for the clusters                                      levels = set(np.mean(cluster) for cluster in clusters if cluster)
return levels def _identify_support_resistance(self, window: int=14, sensitivity: float=0.05) -> Dict[str, List[float]]: """Identifies support and resistance levels using clustering.""" if self.df.empty:
return {
"support": [], "resistance": []} data = self.df["close"].values levels = [] extrema = self._find_extrema(data, window) if extrema is not None and len(extrema) > 0: clustered_levels = self._cluster_levels(extrema, sensitivity) levels = sorted(list(clustered_levels)) if not levels:
return {
"support": [], "resistance": []}  # Handle the case with no levels                                                                    current_price = data[-1] support = [level for level in levels if level < current_price]                                                       resistance = [level for level in levels if level > current_price] self.levels.update(
{
"support_clusters": support, "resistance_clusters": resistance
} return {
"support": support, "resistance": resistance
}


def _find_nearest_levels(
self, current_price: float) -> Tuple[List[Tuple[str, float, float]], List[Tuple[str, float, float]]]: """Finds the nearest support and resistance levels."""


supports = [] resistances = []
# Check for cluster-based levels
if "support_clusters" in self.levels:
supports.extend(
[("Support (Cluster)", level, 0) for level in self.levels["support_clusters"] if level < current_price
])
if "resistance_clusters" in self.levels:
resistances.extend([("Resistance (Cluster)", level, 0)
# Check for Fibonacci levels                                           for level in self.levels["resistance_clusters"] if level > current_price])                                                           if ("nearest_support" in self.levels and self.levels["nearest_support"] is not None):
supports.append(("Support (Fibonacci)", self.levels["nearest_support"], 0))
if ("nearest_resistance" in self.levels and self.levels["nearest_resistance"] is not None): resistances.append(
("Resistance (Fibonacci)", self.levels["nearest_resistance"], 0))
# Sort by distance
nearest_supports = sorted(supports, key = lambda x: current_price - x[1])[:5]
nearest_resistances = sorted(resistances, key = lambda x: x[1] - current_price)[
:5]
return nearest_supports, nearest_resistances def _analyze_higher_timeframes(
self, higher_timeframes: List[str]) -> Dict[str, Dict[str, Optional[float]]]:

"""Analyzes support/resistance on higher timeframes.""" higher_tf_levels = {}
for tf in higher_timeframes:
df_higher = self.api.fetch_klines(self.config.symbol, tf, limit = 200) if not df_higher.empty:
analyzer_higher = TradingAnalyzer(self.config, self.logger)
analyzer_higher.df = df_higher analyzer_higher._identify_support_resistance()
higher_tf_levels[tf]= analyzer_higher.levels else:
self.logger.warning(f"Could not fetch data for timeframe {
tf
}")
return higher_tf_levels def _determine_trend_momentum_adx(self) -> str:

"""Determines the trend direction based on multiple indicators."""  # Calculate relevant indicators                                        momentum = self.calculate_momentum()                                   sma_short = EMAIndicator(self.df["close"], window=5).ema_indicator()   sma_long = EMAIndicator(self.df["close"], window=20).ema_indicator()
macd_data = self.calculate_macd() aroon_data = self.calculate_aroon() obv = self.calculate_obv() vpt = self.calculate_vpt() trend_strength = 0 # Momentum                                                             if momentum.iloc[-1] > 0:                                                  trend_strength += 0.5  # Positive momentum slightly favors upward trend                                                                   elif momentum.iloc[-1] < 0:                                            trend_strength -= 0.5  # Negative momentum slightly favors downward trend
# Moving Averages                                                      if sma_short.iloc[-1] > sma_long.iloc[-1]:                             trend_strength += 1  # Short MA above long MA favors upward trend
# Short MA below long MA favors downward trend
elif sma_short.iloc[-1] < sma_long.iloc[-1]: trend_strength -= 1
# MACD                                                                 if not macd_data.empty:
# MACD above signal favors upward trend                                                                            elif macd_data["macd"].iloc[-1] < macd_data["signal"].iloc[-1]:            trend_strength -= 0.7  # MACD below signal favors downward trend
if macd_data["macd"].iloc[-1] > macd_data["signal"].iloc[-1]:
trend_strength += 0.7
if self.detect_macd_divergence() == "bullish":  # Bullish divergence adds to upward strength                                                                       elif self.detect_macd_divergence() == "bearish":                                              trend_strength += 0.8
trend_strength -= 0.8  # Bearish divergence adds to downward strength
# ADX (Trend Strength)                                                 adx_data = self.calculate_adx()
if not adx_data.empty: adx = adx_data["ADX"].iloc[-1] plus_di = adx_data["+DI"].iloc[-1] minus_di = adx_data["-DI"].iloc[-1] if adx > 25:
if plus_di > minus_di:
# Strong upward trend confirmed by ADX                                                                             elif minus_di > plus_di:                                                   trend_strength -= 0.6  # Strong downward trend confirmed by ADX                                                                               # Aroon                                                                if not aroon_data.empty:                                                   if aroon_data["Aroon Up"].iloc[-1] > aroon_data["Aroon Down"].iloc[-1]:
trend_strength += 0.6
# Aroon Up dominance favors upward trend                                                                           elif aroon_data["Aroon Down"].iloc[-1] > aroon_data["Aroon Up"].iloc[-1]:                         trend_strength += 0.4                                                  trend_strength -= 0.4  # Aroon Down dominance favors downward trend    # Volume Indicators (Confirmation)                                     if (
obv.iloc[-1] > obv.iloc[-2] and self.df["close"].iloc[-1] > self.df["close"].iloc[-2]
(): trend_strength += 0.3  # OBV confirms upward price movement        elif (
# OBV confirms downward price movement
obv.iloc[-1] < obv.iloc[-2] and self.df["close"].iloc[-1] < self.df["close"].iloc[-2](): trend_strength -= 0.3
if vpt.iloc[-1] > vpt.iloc[-2] and self.df["close"].iloc[-1] > self.df["close"].iloc[-2]
(): trend_strength += 0.3  # VPT confirms upward price movement        elif
vpt.iloc[-1] < vpt.iloc[-2] and self.df["close"].iloc[-1] < self.df["close"].iloc[-2]
():
trend_strength -= 0.3  # VPT confirms downward price movement
# Determine Trend Category based on strength
if trend_strength > 2: return "Strong Upward"
elif trend_strength > 0.5: return "Mild Upward" elif trend_strength < -2:
return "Strong Downward"
elif trend_strength < -0.5: return "Mild Downward" else:
return "Sideways"
# Calculate momentum and moving averages                               momentum = self.calculate_momentum()
sma_short = EMAIndicator(self.df["close"], window = 5).ema_indicator()
sma_long = EMAIndicator(self.df["close"], window = 20).ema_indicator()
# Ensure ADX data is available                                         if "ADX" not in self.df.columns:                                       adx_data = self.calculate_adx()
if not adx_data.empty: self.df["ADX"] = adx_data["ADX"] self.df["+DI"] = adx_data["+DI"] self.df["-DI"] = adx_data["-DI"]
# Cannot determine trend without ADX                 # Get the most recent values
else: return "neutral"
adx = self.df["ADX"].iloc[-1]
plus_di = self.df["+DI"].iloc[-1]
minus_di = self.df["-DI"].iloc[-1] if adx > 25: # Strong trend
if (momentum.iloc[-1] > 0 and sma_short.iloc[-1] > sma_long.iloc[-1] and plus_di > minus_di
):
return "upward"
elif (
momentum.iloc[-1] < 0 and sma_short.iloc[-1] < sma_long.iloc[-1] and minus_di > plus_di
):
return "downward"
else: return "neutral"  # Strong trend but direction unclear based on other indicators                                                              else:                                                                  return "neutral"  # Weak or no trend
def _calculate_weighted_score(
self, momentum_status: str, volume_status: str,
macd_divergence: str,
params: Dict,) -> float: """Calculates a weighted score based on the combined factors."""

score = 0.0 weights = params["user_defined_weights"] momentum_cross_weight = weights["momentum_cross"] positive_momentum_weight = weights["positive_momentum"] significant_volume_weight = weights["significant_volume"]
divergence_weight = weights["divergence"]
if momentum_status == "oversold": score += positive_momentum_weight elif momentum_status == "overbought": score -= positive_momentum_weight if volume_status == "high": score += significant_volume_weight
if macd_divergence == "bullish": score += divergence_weight elif macd_divergence == "bearish": score -= divergence_weight
# check for cross overs                                                if "EMA_Short" in self.df.columns and "EMA_Long" in self.df.columns:
ema_short_current = self.df["EMA_Short"].iloc[-1] ema_long_current = self.df["EMA_Long"].iloc[-1] ema_short_prev = self.df["EMA_Short"].iloc[-2] ema_long_prev = self.df["EMA_Long"].iloc[-2]
# Bullish crossover                                                    if ema_short_prev < ema_long_prev and ema_short_current > ema_long_current:
score += momentum_cross_weight  # Bearish crossover
if ema_short_prev > ema_long_prev and ema_short_current < ema_long_current: score -= momentum_cross_weight return score

def _suggest_trades(self, current_price: float, trend: str,
nearest_supports: List[Tuple[str, float, float]], nearest_resistances: List[Tuple[str, float, float]],
adapted_params: Dict,) -> Tuple[Dict[str, Dict[str, Optional[float]]], float, float]:
"""Suggests entry and target prices for long and short trades based on trend and S/R levels.""" suggestions = {
"long": {}, "short": {}}  # Determine the momentum, volume, and MACD divergence                  momentum = self.analyze_momentum(self.df)                              volume = self.analyze_volume(self.df)
macd_divergence = self.detect_macd_divergence() # Calculate the weighted scores
long_score = self._calculate_weighted_score(momentum, volume, macd_divergence, adapted_params) short_score = (
self._calculate_weighted_score(
    momentum, volume, macd_divergence, adapted_params) * -1
# Determine entries and targets                                        if (trend == "upward" and nearest_supports and long_score > 0.1
):  # Use positive score                                                # Long entry near closest support with target at closest resistance
entry_support = nearest_supports[0] target_resistance = nearest_resistances[0] if nearest_resistances else None
suggestions["long"]["entry"] = entry_support[1] suggestions["long"]["target"] = (
# Default 5% above current price                                                                                                           elif (                                                                     trend == "downward" and nearest_resistances and short_score > 0.1  ):  # Use negative score
target_resistance[1] if target_resistance else current_price * 1.05)
# Short entry near closest resistance with target at closest support                                                                      entry_resistance = nearest_resistances[0]                              target_support = nearest_supports[0] if nearest_supports else None     suggestions["short"]["entry"] = entry_resistance[1]                    suggestions["short"]["target"] = (                                         target_support[1] if target_support else current_price * 0.95      )  # Default 5% below current price                                    return suggestions, long_score, short_score
def _analyze_rsi(self, rsi_value: float) -> str:
"""Provides a textual analysis of the RSI value."""
if rsi_value > self.config.rsi_overbought: return "Overbought" elif rsi_value < self.config.rsi_oversold: return "Oversold" else: return "Neutral" def _log_analysis_results(self, current_price: float, trend: str, momentum: str, volume: str, rsi_value: float, rsi_analysis: str, macd_analysis: str, fib_levels: Dict[str, Optional[float]], nearest_supports: List[Tuple[str, float, float]], nearest_resistances: List[Tuple[str, float, float]], higher_tf_levels: Dict[str, Dict[str, Optional[float]]], trade_suggestions: Dict[str, Dict[str, Optional[float]]], long_score: float, short_score: float,) -> None: """Logs the analysis results.""" self.logger.info(f" {
Fore.YELLOW
}--- Analysis Results for {
self.config.symbol
} ( {
self.config.interval
}) ---") self.logger.info(f" {
Fore.YELLOW
}Symbol: {
Fore.MAGENTA
} {
self.config.symbol
}") self.logger.info(f" {
Fore.YELLOW
}Timeframe: {
Fore.MAGENTA
} {
self.config.interval
}") self.logger.info(f" {
Fore.YELLOW
}Current Price: {
Fore.CYAN
} {
current_price:.2f
}")
self.logger.info(f" {
Fore.YELLOW
}Overall Trend: {
Fore.CYAN
} {
trend
}")  # Updated Trend Logging                                       self.logger.info(f" {                                                      Fore.YELLOW                                                        }Momentum: {                                                               Fore.CYAN
 {
momentum
}")                                                                    self.logger.info(f" {
Fore.YELLOW
}Volume: {
Fore.CYAN
} {
volume
}]
self.logger.info(f" {
Fore.YELLOW
}RSI Value: {
Fore.CYAN
} {
rsi_value:.2f
}") self.logger.info(f" {
Fore.YELLOW
}RSI Analysis: {
Fore.CYAN
} {
rsi_analysis
}")
self.logger.info(f" {
Fore.YELLOW
}MACD Analysis: {
Fore.CYAN
} {
macd_analysis
}")
# ... (rest of the logging remains similar) ...
def _log_analysis_results(self, current_price: float, trend: str,
momentum: str, volume: str, rsi_value: float, rsi_analysis: str, macd_analysis: str, fib_levels: Dict[str, Optional[float]], nearest_supports: List[Tuple[str, float, float]], nearest_resistances: List[Tuple[str, float, float]], higher_tf_levels: Dict[str, Dict[str, Optional[float]]], trade_suggestions: Dict[str, Dict[str, Optional[float]]], long_score: float, short_score: float,) -> None: """Logs the analysis results."""
self.logger.info(f" {
Fore.YELLOW
}--- Analysis Results for {
self.config.symbol
} ( {
self.config.interval
}) ---")
self.logger.info(f" {
Fore.YELLOW
}Symbol: {
Fore.MAGENTA
} {
self.config.symbol
}") self.logger.info(f" {
Fore.YELLOW
}Timeframe: {
Fore.MAGENTA
} {
self.config.interval
}")
self.logger.info(f" {
Fore.YELLOW
}Current Price: {
Fore.CYAN
} {
current_price:.2f
}") self.logger.info(f" {
Fore.YELLOW
}Momentum: {
Fore.CYAN
} {
momentum
}") self.logger.info(f" {
Fore.YELLOW
}Volume: {
Fore.CYAN
} {
volume
}")
self.logger.info(f" {
Fore.YELLOW
}RSI Value: {
Fore.CYAN
} {
rsi_value:.2f
}") self.logger.info(f" {
Fore.YELLOW
}RSI Analysis: {
Fore.CYAN
} {
rsi_analysis
}")
self.logger.info(f" {
Fore.YELLOW
}MACD Analysis: {
Fore.CYAN
} {
macd_analysis
}")  # Log Fibonacci levels                                                 self.logger.info(f" {                                                      Fore.YELLOW                                                        }Fibonacci Levels:") if fib_levels["support"]:                         for level in fib_levels["support"]:                                        self.logger.info(f" {                                                      Fore.GREEN
)Support: {
Fore.CYAN
} {

}") if fib_levels["resistance"]:                                   for level in fib_levels["resistance"]:                                     self.logger.info(f" {
Fore.RED
}Resistance: {
Fore.CYAN
} {

}")                                                                # Log nearest support levels                                           self.logger.info(f" {
Fore.YELLOW
}Nearest Support Levels: ")             for support in nearest_supports:
self.logger.info(f" {
Fore.GREEN
} {
support[0]}: {
Fore.CYAN
} {
support[1]:.2f
} {
Fore.WHITE
}(Distance: {
current_price - support[1]:.2f
})")
# Log nearest resistance levels                                        self.logger.info(f" {Fore.YELLOW}Nearest Resistance Levels:")          for resistance in nearest_resistances:                                     self.logger.info(
f" {
Fore.RED
} {
resistance[0]}: {
Fore.CYAN
} {
resistance[1]:.2f
} {
Fore.WHITE
}(Distance: {
resistance[1] - current_price:.2f
})"
) # Log Pivot Points                                                     if hasattr(self, "levels") and self.levels:                            self.logger.info(f" {
Fore.YELLOW
}Pivot Points:") for level_name, level_value in self.levels.items():   if "Pivot" in level_name:                                                  self.logger.info(
f" {
Fore.YELLOW
} {
level_name
}: {
Fore.CYAN
} {
level_value:.2f
}")
# Log higher timeframe levels                                          self.logger.info(f" {Fore.YELLOW}Higher Timeframe Levels:")            for tf, levels in higher_tf_levels.items():                                self.logger.info(f" {                                                      Fore.YELLOW                                                        }Timeframe: {
Fore.MAGENTA
} {
tf
}") if levels.get("support_clusters"):                             self.logger.info(f" {
Fore.GREEN
}Support Clusters:")                                                   for level in levels["support_clusters"]:                                   self.logger.info(f" - {
Fore.CYAN
} {
level:.2f
}") if levels.get("resistance_clusters"):                          self.logger.info(f" {
Fore.RED
}Resistance Clusters:") for level in levels["resistance_clusters"]: self.logger.info(f" - {
Fore.CYAN
} {
level:.2f
}")
# Log trade suggestions                                                self.logger.info(f" {Fore.YELLOW}Trade Suggestions:")
if trade_suggestions["long"]: self.logger.info(f" {
Fore.GREEN
}Long Entry: {
Fore.CYAN
} {
trade_suggestions['long']['entry']:.2f
}") self.logger.info(f" {
Fore.GREEN
}Long Target: {
Fore.CYAN
} {
trade_suggestions['long']['target']:.2f
}") else :
self.logger.info(f" {
Fore.GREEN
}Long: {
Fore.CYAN
} None") if trade_suggestions["short"]:
self.logger.info(f" {
Fore.RED
}Short Entry: {
Fore.CYAN
} {
trade_suggestions['short']['entry']:.2f
}"
) self.logger.info(f" {
Fore.RED
}Short Target: {
Fore.CYAN
} {
trade_suggestions['short']['target']:.2f
}") else : self.logger.info(f" {
Fore.RED
}Short: {
Fore.CYAN
} None")
# Log scores                                                           self.logger.info(f" {Fore.YELLOW}Long Score: {Fore.CYAN} {long_score:.2f}")                                                                   self.logger.info(f" {Fore.YELLOW}Short Score: {Fore.CYAN} {short_score:.2f}")
